====== OPEN BUGS ======

When fixing a bug, remove it from this list.  When we get a BTS things
will be more streamlined.  --lars

#0001  2007-04-24 / lth

  Incorrect namespace sets for property lookup.  Consider code in the
  Array package:

        public static function join(self, sep = undefined)
           ...

        prototype function join(sep = undefined)
            Array.join(this, sep);

        intrinsic function join(sep = undefined):String
            Array.join(this, sep);

  Here the "Array." qualification is currently necessary, but it should not
  be, because statics should be visible and should not be shadowed by instance
  methods (I think).


#0002  2007-04-24 / lth

  >> (1).toString()
  [posn] builtins/int.es:33.1-33.18
  **ERROR** (near builtins/int.es:33.1-33.18) machError getting uninitialized temporary 1

  >> (1u).toString()
  [posn] builtins/uint.es:33.1-33.18
  **ERROR** (near builtins/uint.es:33.1-33.18) machError getting uninitialized temporary 1


#0003  2007-04-24 / lth

  <numbertype>.toLocaleString() generally fails, sometimes catastrophically, sometimes just
  returning undefined:

  >> (1).toLocaleString();
  undefined

  >> new Number(1).toLocaleString()
  [stack] [toLocaleString() | toLocaleString()]
  **ERROR** (unknown location)evalError unresolved identifier expression{multiname: [namespace intrinsic]::value [namespace internal ]::value [namespace public ]::value [namespace internal ]::value [namespace public ]::value }

  >> (1.0).toLocaleString()
  [posn] builtins/double.es:55.17-55.22
  [stack] [toLocaleString() | toLocaleString() | toString() | toString(10)]
  **ERROR** (near builtins/double.es:55.17-55.22) evalError unresolved identifier expression{multiname: [namespace intrinsic]::radix [namespace internal ]::radix [namespace public ]::radix [namespace internal ]::radix [namespace public ]::radix }


#0004  2007-04-25 / lth

  Lexer treats input coming from eval as UTF8:

    $ make repl
    perl repl-with-readline.pl

    >> eval("\x80")
    uncaught exception Incomplete
      raised at: main.sml:115.46
                 main.sml:110.33
                 parser.sml:6841.45
                 ../../smlnj-lib/Util/utf8.sml:59.21-59.31


#0005  2007-04-25 / lth

  For-each-in does not work, it enumerates property names, not values:

    >> for each ( let x in [10,20,30] ) print(x)
    [Object object 0]
    _length
    2
    1
    0
    length

  (It also ignores the issue of enumerability, but so does for-in.)


#0006  2007-04-26 / lth

  The arguments object is wrong.  It can't be an Array object, it
  needs to be an Object that delegates to the Array prototype.  This
  is important because the "length" field must always be the actual
  number of arguments passed, not taking into account defaults or rest
  args.  Thus initializing it from the instantiated formal argument
  list is not at all correct.

  Also, the arguments object must appear to share storage with its
  activation record, this can be handled by instantiating it with
  scoped getters and setters when it is created (and this is a good
  specification mechanism, probably).


#0007  2007-04-27 / lth

  Division is broken:

    1/3 => 0   // should be 0.33333....


#0008  2007-04-27 / lth

  "switch type" statements are not implemented.


#0009  2007-04-27 / lth

  The Mach.OBJ type must carry the class of the object so that
  magic::getClassName can do its thing for Array, String, Date,
  RegExp, and all the others -- their class names are really not
  "Object".

  (Causes one Array test to fail.)

