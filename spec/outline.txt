This file is the master for the outline of the spec and holds
meta-information on structuring etc (essentially an architecture
description for the spec).

The spec is divided into six parts,

    - Front matter
    I Overview and tutorial
   II The language
  III The libraries
   IV Informative appendices
    - Indices


= Front matter =

TBD.


= I.  Overview and tutorial =

    * Subsections:
       - program organization
       - computation
       - strict, static, types
       - definitions, hoisting, scope
    * We should not avoid redundancy here, it needs to set things up well

= II.  The language =

    * Essentially chapters 6-17 in the wiki outline
    * Multilevel description
      - mach, other infrastructure: publish here or elsewhere?
      - rely on the RI, extract code from the RI
    II.a  Source syntax
          AST definition
          Source -> AST translation
          - desugaring
          - temps
          - definitions
          - hoisting
          - ......
    II.b  The type system
    II.c  Scopes and names
    II.d  Verification
    II.e  Loading
    II.f  Computation


= III.  The built-in libraries =

== Subsections so far ==

  - Intro / overview
  - The global object
  - "Object"
  - "Function"
  - "Array", "vector" (if we have it)
  - "String", "string"
  - "Boolean", "boolean"
  - "Number", "int", "uint", "double", "decimal", "Numeric" (if we have it)
  - "Math"
  - "Date"
  - "RegExp"
  - "Error"
  - "Class", "Interface", and other type objects
  - "ByteArray"
  - "Dict"
  - "Name"
  - "Namespace"
  - meta-object proposal
  - stack-mark proposal


== Rules for the library descriptions (and code) ==

=== General guidelines ===

- Follow E262-3 where reasonable, to preserve continuity.  Steal prose
  where possible, ditto, and to save time.

- Strive for uniformity, separation of concerns, and grouping of
  related functionality.


=== Specific rules ===

- If there are "static" variants of a method, then that method is the
  authoritative one, and intrinsic and prototype methods forward to
  it.  The descriptions of the latter will be brief and will contain
  largely conversion behavior.

- If there is no static variant of a method, then the intrinsic method
  is the authoritative one; the prototype method forwards to it.

- If there are groups of repeated patterns (eg the new getter and
  setter methods on Date) where all patterns only forward, then the
  patterns can be grouped in a separate section.

- Every non-static method shall have an intrinsic variant.

- Static functions shall be public, not intrinsic.  (Date.now violates
  this.)

- The intrinsic and static variants shall have typed signatures where
  possible (see below for open question on prototype methods).

  NOTE, this is probably not right for a number of cases; it depends
  on what we mean by typechecking and conversion.  See open issue in
  following section.

- If a method requires helper code or helper types, then the helper
  code or types shall be presented with the method if only that method
  uses it, or relegated to a separate subsection if multiple methods
  use it.

  However, if the helper code is a private method that the other
  methods forward to after minor preprocessing (eg as for
  string.concatHelper) then this method shall be described with the
  normally canonical (static or intrinsic) method.

- Magic functions and the data structures they use shall be relegated
  to a separate section (so, string representations and the magic
  functions on strings are a separate section in the chapter on
  strings).

- Native functions generally fall into two classes: either they define
  the method completely, or they act as normative or informative
  helpers.  It is probably good to relegate them to the same appendix
  as the magic code (because they presumably need access to the same
  type of data structures) with the ECMAScript signatures and/or
  wrapper code being presented in the main part of the spec, with the
  prose description appropriate on that level.

- Non-normative parts of methods shall as a general rule be factored
  out as separate functions, and these functions shall be presented
  with their signatures and a prose description; the body shall
  normally be omitted (but will of course be available as part of the
  RI).
  
- Non-normative parts of methods that can't be factored shall always
  be clearly marked as non-normative with a comment /*NOT NORMATIVE*/,
  but this practice is strongly discouraged.

- If a method implements a grammar (regular expressions, numbers) then
  as a general rule the method shall have a two-step description
  wherein the grammar is translated to an internal, structured
  reprsentation in the first step and the second step processes that
  representation.

  The code for the translation shall not be presented; instead the
  grammar shall be presented along with a description of how it maps
  to the structured representation.

    * Major use case: regular expression parsing.
    * Minor use cases: number parsing, date parsing.

  Grammars should be presented as BNF in the same style as the syntax
  description for the language in Part II.

- Changes from E262-3 shall be noted if:

    - the semantics of a method has changed from E262-3, or
    - a method has been added to an existing class, or
    - a property has been added to an existing class, or
    - the class structure has changed (as for String -> string), or
    - a class has been added.

  A change shall be noted in an E262-3 style "NOTE" at the end of the
  section presenting the semantics of the method (eg, parseInt has
  changed; this fact will be noted at the end of the section
  describing the intrinsic variant, since that is canonical), or in
  the overview for the class, as appropriate.


== Open problems ==

- What are the ECMA constraints for the spec, if any?

- Some new properties are visible because we haven't bothered to make
  them internal (there are some open tickets on this).  One way to
  make them internal is to export a namespace from an internal package
  and to use this namespace to annotate the functions.

- Use of private packages (like Unicode and Library): how to handle
  this?  Maybe a common "LibraryInternals" package is OK with some
  prose stating that "this thing is internal".

- Use of namespaces in the code: the problem is that all functions now
  need to open "intrinsic" to get type names and to do early binding
  (necessary for sematics).  But then the fact that we're using
  intrinsic functions is not visible.

- Other private prefixes, like "default namespace"?

- Is it not true that everything is public or intrinsic unless noted
  otherwise, and we should assume "default namespace public" always,
  and always note when something is private?

- Shall the prototype method shall have an E262-3 compatible signature
  or typed signatures?  This depends on whether annotations imply
  conversions or not.  If they do, then "x:double" on a function is
  fine, there is no need for an untyped interface with an explicit
  "ToDouble" or "x to double" conversion in the body.  There is some
  open ticket on this.

- Comments in the source code?


= Appendices =

TBD.


= Indices =

It would be good to do something useful here.  The lack of an index in
E262-3 is at times really annoying.

What's the purpose of an index?

 - To make it simple to look up a keyword and find page numbers where
   it's most relevant that help will be found


What kinds of indices are there?

 - Concept index (eg, "conversions", ...)
 - Function index (definition + all uses of ToString, say)


Should look to other language standards before deciding on anything
else.


