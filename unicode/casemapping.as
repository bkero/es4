/* Extract Unicode case-mapping data and generate a package fragment
 * that initializes two mapping tables, upperTbl and lowerTbl.  Both
 * map defined character codes to either another character code or to
 * an array of character codes.  Identity conversions are not
 * represented in the table.
 *
 * Simple mappings are defined by UnicodeData.txt.  We extract mappings
 * for Uppercase/Titlecase => Lowercase 
 *     Lowercase/Titlecase => Uppercase
 *
 * More complex mappings are defined by SpecialCasing.txt; these may
 * in some cases override the mappings in UnicodeData.txt.
 *
 * The program builds two sparse tables, toupper and tolower, that
 * represents these.  UnicodeData.txt is processed first; overrides in
 * SpecialCasing.txt just replace any initial mappings.
 *
 * This program was written to process the Unicode 5.0.0 data files.
 */

package 
{
    import avmplus.File;  // For File.read() only

    function readAndFilter(filename, accept, filter) {
        var input = File.read(filename).split("\n");
        var A = [];

        for ( var i=0 ; i < input.length ; i++ ) {
            var line = input[i];
            if (accept && !accept(line))
                continue;
            var fields = line.split(";");
            if (filter && !filter(fields))
                continue;
            A[parseInt(fields[0],16)] = fields;
        }

        return A;
    }

    function fixup(s) {
        var ccs = s.replace(/(?:^\s+)|(?:\s+$)/g, "").split(/\s+/g);
        if (ccs.length == 1)
            return "0x" + ccs[0];
        else
            return "[0x" + ccs.join(",0x") + "]";
    }

    var unicode = readAndFilter("UnicodeData.txt", false, false);
    var special = readAndFilter("SpecialCasing.txt",
                                function (line) { return !line.match(/^#/) },
                                function (fields) { return fields.length === 5 } );
    var toupper = [];
    var tolower = [];
    var cc, item, spcl, i;

    for ( cc in unicode ) {
        item = unicode[cc];

        if ((item[2] == "Ll" || item[2] == "Lt") && item[12] != "")
            toupper[cc] = "0x" + item[12];

        if ((item[2] == "Lu" || item[2] == "Lt") && item[13] != "")
            tolower[cc] = "0x" + item[13];
    }

    for ( cc in special ) {
        item = unicode[cc];
        spcl = special[cc];

        if (item[2] == "Ll" || item[2] == "Lt") 
            toupper[cc] = fixup(spcl[3]);

        if (item[2] == "Lu" || item[2] == "Lt")
            tolower[cc] = fixup(spcl[1]);
    }

    print("/* Generated by ../unicode/casemapping.as */");
    print("package Unicode {");
    print("  var upperTbl = [];");
    print("  var lowerTbl = [];");

    print("  function initUpperTbl() {");
    print("    let u : [] = upperTbl;");
    print("    if (u.length > 0) return;");
    for ( i=0 ; i < toupper.length ; i++ ) {
        if (!(i in toupper))
            continue;
        print("    u[0x" + i.toString(16) + "]=" + toupper[i] + ";");
    }
    print("  }");

    print("  function initLowerTbl() {");
    print("    let l : [] = lowerTbl;");
    print("    if (l.length > 0) return;");
    for ( i=0 ; i < tolower.length ; i++ ) {
        if (!(i in tolower))
            continue;
        print("    l[0x" + i.toString(16) + "]=" + tolower[i] + ";");
    }
    print("  }");

    print("}");
}



